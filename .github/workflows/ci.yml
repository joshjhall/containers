name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'auto-patch/**'
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================================
  # Test Stage
  # =====================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for Gitleaks to scan commit ranges

      - name: Run unit tests
        run: |
          echo "Running unit tests without Docker..."
          export SKIP_DOCKER_CHECK=true
          ./tests/run_unit_tests.sh

      - name: Run shellcheck
        run: |
          echo "Running shellcheck code quality checks..."
          sudo apt-get update && sudo apt-get install -y shellcheck

          # Run shellcheck on core build system scripts (lib/, bin/)
          # Uses .shellcheckrc for configuration (severity=warning)
          # Excludes .devcontainer/ (VS Code specific, has own suppressions)
          # Fails the build if any warnings or errors are found
          # Note: --severity=warning filters to warnings and errors only (not info/style)
          FAILED=0
          while IFS= read -r file; do
            echo "Checking $file..."
            if ! shellcheck --severity=warning "$file"; then
              FAILED=1
            fi
          done < <(find . -type f -name "*.sh" ! -path "./tests/*" ! -path "./.git/*" ! -path "./.devcontainer/*")

          if [ $FAILED -eq 1 ]; then
            echo "❌ Shellcheck found issues in core build scripts."
            exit 1
          fi

          echo "✅ All core build scripts passed shellcheck"

      - name: Run secret scanning with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        # Note: gitleaks-action@v2 doesn't accept input parameters
        # It automatically scans commits in push/PR events
        # To customize behavior, create a .gitleaks.toml configuration file

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/results/
          retention-days: 7

  # =====================================
  # Build Stage
  # =====================================
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant:
          # =====================================================
          # VARIANT FEATURE TOGGLE (for debugging/development)
          # =====================================================
          # To test incrementally, comment out variants below.
          # Start with minimal, then add python-dev, node-dev,
          # cloud-ops, polyglot, and rust-golang one at a time.
          # Once all are working, uncomment all for full testing.
          # =====================================================
          # - name: minimal
          #   build_args: |
          #     PROJECT_NAME=containers
          #     PROJECT_PATH=.
          # - name: python-dev
          #   build_args: |
          #     PROJECT_NAME=containers
          #     PROJECT_PATH=.
          #     INCLUDE_PYTHON_DEV=true
          #     INCLUDE_OP=true
          #     INCLUDE_DEV_TOOLS=true
          #     INCLUDE_POSTGRES_CLIENT=true
          #     INCLUDE_REDIS_CLIENT=true
          #     INCLUDE_SQLITE_CLIENT=true
          #     INCLUDE_DOCKER=true
          - name: node-dev
            build_args: |
              PROJECT_NAME=containers
              PROJECT_PATH=.
              INCLUDE_NODE_DEV=true
              INCLUDE_OP=true
              INCLUDE_DEV_TOOLS=true
              INCLUDE_POSTGRES_CLIENT=true
              INCLUDE_REDIS_CLIENT=true
              INCLUDE_SQLITE_CLIENT=true
              INCLUDE_DOCKER=true
          # - name: cloud-ops
          #   build_args: |
          #     PROJECT_NAME=containers
          #     PROJECT_PATH=.
          #     INCLUDE_KUBERNETES=true
          #     INCLUDE_TERRAFORM=true
          #     INCLUDE_AWS=true
          #     INCLUDE_GCLOUD=true
          #     INCLUDE_CLOUDFLARE=true
          #     INCLUDE_DEV_TOOLS=true
          #     INCLUDE_DOCKER=true
          #     INCLUDE_OP=true
          # - name: polyglot
          #   build_args: |
          #     PROJECT_NAME=containers
          #     PROJECT_PATH=.
          #     INCLUDE_PYTHON_DEV=true
          #     INCLUDE_NODE_DEV=true
          #     INCLUDE_DEV_TOOLS=true
          #     INCLUDE_DOCKER=true
          #     INCLUDE_OP=true
          #     INCLUDE_POSTGRES_CLIENT=true
          #     INCLUDE_REDIS_CLIENT=true
          #     INCLUDE_SQLITE_CLIENT=true
          # - name: rust-golang
          #   build_args: |
          #     PROJECT_NAME=containers
          #     PROJECT_PATH=.
          #     INCLUDE_RUST_DEV=true
          #     INCLUDE_GOLANG_DEV=true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.variant.name }}
            type=ref,event=tag,suffix=-${{ matrix.variant.name }}
            type=sha,prefix={{branch}}-,suffix=-${{ matrix.variant.name }}
            type=raw,value=${{ matrix.variant.name }}-latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.variant.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =====================================
  # Integration Tests
  # =====================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        variant:
          # =====================================================
          # VARIANT FEATURE TOGGLE (for debugging/development)
          # =====================================================
          # Must match enabled variants in the 'build' job above.
          # Only test variants that were successfully built.
          # =====================================================
          # - name: minimal
          #   test: minimal
          # - name: python-dev
          #   test: python_dev
          - name: node-dev
            test: node_dev
          # - name: cloud-ops
          #   test: cloud_ops
          # - name: polyglot
          #   test: polyglot
          # - name: rust-golang
          #   test: rust_golang
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and test image
        run: |
          echo "Testing ${{ matrix.variant.name }} image from registry..."
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant.name }}"

          echo "Pulling image: $IMAGE"
          docker pull "$IMAGE"

          echo "Running integration test for ${{ matrix.variant.name }}..."
          IMAGE_TO_TEST="$IMAGE" ./tests/run_integration_tests.sh ${{ matrix.variant.test }}

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.variant.name }}
          path: tests/results/
          retention-days: 7

  # =====================================
  # Debian Version Compatibility Tests
  # =====================================
  debian-version-test:
    name: Debian Version Compatibility
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        debian:
          - version: "11"
            codename: bullseye
          - version: "12"
            codename: bookworm
          - version: "13"
            codename: trixie
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Python build on Debian ${{ matrix.debian.version }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: test-debian-${{ matrix.debian.version }}:python
          build-args: |
            BASE_IMAGE=debian:${{ matrix.debian.codename }}-slim
            PROJECT_NAME=test-debian-${{ matrix.debian.version }}
            PROJECT_PATH=.
            INCLUDE_PYTHON_DEV=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Python installation
        run: |
          docker run --rm test-debian-${{ matrix.debian.version }}:python python --version
          docker run --rm test-debian-${{ matrix.debian.version }}:python poetry --version

      - name: Test cloud tools on Debian ${{ matrix.debian.version }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: test-debian-${{ matrix.debian.version }}:cloud
          build-args: |
            BASE_IMAGE=debian:${{ matrix.debian.codename }}-slim
            PROJECT_NAME=test-debian-${{ matrix.debian.version }}
            PROJECT_PATH=.
            INCLUDE_KUBERNETES=true
            INCLUDE_TERRAFORM=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify cloud tools installation
        run: |
          docker run --rm test-debian-${{ matrix.debian.version }}:cloud kubectl version --client
          docker run --rm test-debian-${{ matrix.debian.version }}:cloud terraform version

  # =====================================
  # Security Scanning
  # =====================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        # =====================================================
        # VARIANT FEATURE TOGGLE (for debugging/development)
        # =====================================================
        # Must match enabled variants in the 'build' job above.
        # Note: rust-golang is excluded from security scanning.
        # =====================================================
        variant: [node-dev] # Full: [minimal, python-dev, node-dev, cloud-ops, polyglot]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image for scanning
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles(format('trivy-results-{0}.sarif', matrix.variant)) != ''
        with:
          sarif_file: 'trivy-results-${{ matrix.variant }}.sarif'
          category: 'container-${{ matrix.variant }}'

      - name: Run Trivy for detailed report
        uses: aquasecurity/trivy-action@0.33.1
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles(format('trivy-results-{0}.sarif', matrix.variant)) != ''
        with:
          name: trivy-results-${{ matrix.variant }}
          path: 'trivy-results-${{ matrix.variant }}.sarif'
          retention-days: 30

  # =====================================
  # Release Stage
  # =====================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          cat > release-notes.md << EOF
          ## Container Build System Release ${VERSION}

          ### Available Images
          - \`ghcr.io/${{ github.repository }}:minimal-${VERSION}\` - Minimal base container
          - \`ghcr.io/${{ github.repository }}:python-dev-${VERSION}\` - Python development environment
          - \`ghcr.io/${{ github.repository }}:node-dev-${VERSION}\` - Node.js development environment
          - \`ghcr.io/${{ github.repository }}:cloud-ops-${VERSION}\` - Cloud operations tools
          - \`ghcr.io/${{ github.repository }}:polyglot-${VERSION}\` - Multi-language environment

          ### Usage
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:python-dev-${VERSION}
          docker run -it --rm ghcr.io/${{ github.repository }}:python-dev-${VERSION}
          \`\`\`

          ### What's Changed
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

          ### Using as Git Submodule
          \`\`\`bash
          git submodule add https://github.com/${{ github.repository }}.git containers
          git submodule update --init --checkout --remote --reference ${VERSION}
          \`\`\`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}