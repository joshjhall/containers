name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Weekly version check - Sundays at 2am UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================================
  # Test Stage
  # =====================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run unit tests
        run: |
          echo "Running unit tests without Docker..."
          export SKIP_DOCKER_CHECK=true
          ./tests/run_unit_tests.sh

      - name: Run shellcheck
        run: |
          echo "Running shellcheck code quality checks..."
          sudo apt-get update && sudo apt-get install -y shellcheck

          # Run shellcheck on core build system scripts (lib/, bin/)
          # Uses .shellcheckrc for configuration (severity=warning)
          # Excludes .devcontainer/ (VS Code specific, has own suppressions)
          # Fails the build if any warnings or errors are found
          # Note: --severity=warning filters to warnings and errors only (not info/style)
          FAILED=0
          while IFS= read -r file; do
            echo "Checking $file..."
            if ! shellcheck --severity=warning "$file"; then
              FAILED=1
            fi
          done < <(find . -type f -name "*.sh" ! -path "./tests/*" ! -path "./.git/*" ! -path "./.devcontainer/*")

          if [ $FAILED -eq 1 ]; then
            echo "❌ Shellcheck found issues in core build scripts."
            exit 1
          fi

          echo "✅ All core build scripts passed shellcheck"

      - name: Run secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/results/
          retention-days: 7

  # =====================================
  # Build Stage
  # =====================================
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant:
          - name: minimal
            build_args: ""
          - name: python-dev
            build_args: "INCLUDE_PYTHON_DEV=true INCLUDE_OP=true INCLUDE_DEV_TOOLS=true INCLUDE_POSTGRES_CLIENT=true INCLUDE_REDIS_CLIENT=true INCLUDE_SQLITE_CLIENT=true INCLUDE_DOCKER=true"
          - name: node-dev
            build_args: "INCLUDE_NODE_DEV=true INCLUDE_OP=true INCLUDE_DEV_TOOLS=true INCLUDE_POSTGRES_CLIENT=true INCLUDE_REDIS_CLIENT=true INCLUDE_SQLITE_CLIENT=true INCLUDE_DOCKER=true"
          - name: cloud-ops
            build_args: "INCLUDE_KUBERNETES=true INCLUDE_TERRAFORM=true INCLUDE_AWS=true INCLUDE_GCLOUD=true INCLUDE_CLOUDFLARE=true INCLUDE_DEV_TOOLS=true INCLUDE_DOCKER=true INCLUDE_OP=true"
          - name: polyglot
            build_args: "INCLUDE_PYTHON_DEV=true INCLUDE_NODE_DEV=true INCLUDE_DEV_TOOLS=true INCLUDE_DOCKER=true INCLUDE_OP=true INCLUDE_POSTGRES_CLIENT=true INCLUDE_REDIS_CLIENT=true INCLUDE_SQLITE_CLIENT=true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.variant.name }}
            type=ref,event=tag,suffix=-${{ matrix.variant.name }}
            type=sha,prefix={{branch}}-,suffix=-${{ matrix.variant.name }}
            type=raw,value=${{ matrix.variant.name }}-latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PROJECT_NAME=containers
            PROJECT_PATH=.
            ${{ matrix.variant.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =====================================
  # Security Scanning
  # =====================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        variant: [minimal, python-dev, node-dev, cloud-ops, polyglot]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image for scanning
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}-${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.variant }}.sarif'
          category: 'container-${{ matrix.variant }}'

      - name: Run Trivy for detailed report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}-${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results-${{ matrix.variant }}
          path: 'trivy-results-${{ matrix.variant }}.sarif'
          retention-days: 30

  # =====================================
  # Version Check and Auto-Update (Scheduled)
  # =====================================
  version-check:
    name: Check and Update Versions
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use default token for checkout
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check versions
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for version updates..."
          OUTPUT=$(./bin/check-versions.sh --json 2>&1 || true)

          # Save output for update script
          echo "$OUTPUT" > /tmp/version-check-output.json

          # Validate JSON output
          if ! echo "$OUTPUT" | jq empty 2>/dev/null; then
            echo "ERROR: Version check did not return valid JSON"
            exit 1
          fi

          # Check for outdated tools
          OUTDATED=$(echo "$OUTPUT" | jq '[.tools[] | select(.status == "outdated")]')
          UPDATE_COUNT=$(echo "$OUTDATED" | jq 'length')

          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "Found $UPDATE_COUNT version update(s)"
            echo "$OUTDATED" | jq '.'
            echo "has_updates=true" >> $GITHUB_OUTPUT

            # Create summary for PR body
            SUMMARY=""
            while IFS= read -r tool; do
              TOOL_NAME=$(echo "$tool" | jq -r '.tool')
              CURRENT=$(echo "$tool" | jq -r '.current')
              LATEST=$(echo "$tool" | jq -r '.latest')
              SUMMARY="${SUMMARY}- **${TOOL_NAME}**: ${CURRENT} → ${LATEST}\n"
            done < <(echo "$OUTDATED" | jq -c '.[]')

            # Save summary for PR body
            echo "updates_summary<<EOF" >> $GITHUB_OUTPUT
            echo -e "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "All versions are up to date!"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Apply version updates
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "Applying version updates..."
          ./bin/update-versions.sh --input /tmp/version-check-output.json

      - name: Create Pull Request
        if: steps.check.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: automated version updates"
          title: "🤖 Automated Version Updates"
          body: |
            ## Automated Version Updates

            This PR contains automated version updates detected by the weekly scan.

            ### Updated Versions
            ${{ steps.check.outputs.updates_summary }}

            ### What's Changed
            - Updated tool versions in feature scripts
            - Bumped patch version in Dockerfile and CHANGELOG

            ### Next Steps
            1. Review the changes in the Files tab
            2. Check that CI tests pass
            3. Merge when ready

            ---
            *This PR was automatically generated by the version check workflow.*
          branch: auto-update/versions-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            version-update

  # =====================================
  # Release Stage
  # =====================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          cat > release-notes.md << EOF
          ## Container Build System Release ${VERSION}

          ### Available Images
          - \`ghcr.io/${{ github.repository }}:minimal-${VERSION}\` - Minimal base container
          - \`ghcr.io/${{ github.repository }}:python-dev-${VERSION}\` - Python development environment
          - \`ghcr.io/${{ github.repository }}:node-dev-${VERSION}\` - Node.js development environment
          - \`ghcr.io/${{ github.repository }}:cloud-ops-${VERSION}\` - Cloud operations tools
          - \`ghcr.io/${{ github.repository }}:polyglot-${VERSION}\` - Multi-language environment

          ### Usage
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:python-dev-${VERSION}
          docker run -it --rm ghcr.io/${{ github.repository }}:python-dev-${VERSION}
          \`\`\`

          ### What's Changed
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

          ### Using as Git Submodule
          \`\`\`bash
          git submodule add https://github.com/${{ github.repository }}.git containers
          git submodule update --init --checkout --remote --reference ${VERSION}
          \`\`\`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}