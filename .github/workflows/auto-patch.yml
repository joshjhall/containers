name: Automated Patch Releases

on:
  schedule:
    # Weekly version check - Sundays at 2am UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
    branches: ['auto-patch/**']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================================
  # Scheduled Version Check
  # =====================================
  version-check:
    name: Check Versions and Create Patch Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for version updates
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for version updates..."
          OUTPUT=$(./bin/check-versions.sh --json 2>&1 || true)

          # Save output for update script
          echo "$OUTPUT" > /tmp/version-check-output.json

          # Validate JSON output
          if ! echo "$OUTPUT" | jq empty 2>/dev/null; then
            echo "ERROR: Version check did not return valid JSON"
            exit 1
          fi

          # Check for outdated tools
          OUTDATED=$(echo "$OUTPUT" | jq '[.tools[] | select(.status == "outdated")]')
          UPDATE_COUNT=$(echo "$OUTDATED" | jq 'length')

          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "Found $UPDATE_COUNT version update(s)"
            echo "$OUTDATED" | jq '.'
            echo "has_updates=true" >> $GITHUB_OUTPUT

            # Create summary for notification
            SUMMARY=""
            while IFS= read -r tool; do
              TOOL_NAME=$(echo "$tool" | jq -r '.tool')
              CURRENT=$(echo "$tool" | jq -r '.current')
              LATEST=$(echo "$tool" | jq -r '.latest')
              SUMMARY="${SUMMARY}‚Ä¢ ${TOOL_NAME}: ${CURRENT} ‚Üí ${LATEST}\n"
            done < <(echo "$OUTDATED" | jq -c '.[]')

            # Save for commit message and notifications
            echo "updates_summary<<EOF" >> $GITHUB_OUTPUT
            echo -e "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "All versions are up to date!"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Create auto-patch branch and apply updates
        if: steps.check.outputs.has_updates == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create branch name with timestamp
          BRANCH_NAME="auto-patch/$(date +%Y%m%d-%H%M%S)"
          echo "Creating branch: $BRANCH_NAME"

          # Create and checkout new branch
          git checkout -b "$BRANCH_NAME"

          # Apply version updates
          echo "Applying version updates..."
          ./bin/update-versions.sh --input /tmp/version-check-output.json --no-commit

          # Commit changes
          cat > /tmp/commit-message.txt << EOF
          chore: automated version updates

          Version updates detected and applied:

          ${{ steps.check.outputs.updates_summary }}

          This is an automated patch release. CI will validate these changes
          and automatically merge if all tests pass.

          ü§ñ Generated with automated patch release system
          EOF

          git add -A
          git commit -F /tmp/commit-message.txt

          # Push branch (this triggers CI)
          git push origin "$BRANCH_NAME"

          # Save branch name for potential use
          echo "PATCH_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

  # =====================================
  # Auto-Merge After CI Success
  # =====================================
  auto-merge:
    name: Auto-Merge Patch Release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      startsWith(github.event.workflow_run.head_branch, 'auto-patch/')
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get patch branch info
        id: branch_info
        run: |
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Extract version changes from the branch
          git fetch origin "$BRANCH_NAME"
          git checkout "$BRANCH_NAME"

          # Get current version from Dockerfile
          CURRENT_VERSION=$(grep "^ARG VERSION=" Dockerfile | cut -d'=' -f2 | tr -d '"')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Get commit message for notification
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Merge to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Checkout main and merge
          git checkout main
          git merge --no-ff "${{ steps.branch_info.outputs.branch }}" -m "Merge automated patch release: ${{ steps.branch_info.outputs.branch }}"

          # Push to main
          git push origin main

      - name: Create and push version tag
        run: |
          VERSION="${{ steps.branch_info.outputs.version }}"
          git tag -a "v${VERSION}" -m "Automated patch release v${VERSION}"
          git push origin "v${VERSION}"

      - name: Delete auto-patch branch
        run: |
          git push origin --delete "${{ steps.branch_info.outputs.branch }}"

      - name: Send success notification
        if: success()
        run: |
          VERSION="${{ steps.branch_info.outputs.version }}"

          curl -s \
            --form-string "token=${{ secrets.PUSHOVER_TOKEN }}" \
            --form-string "user=${{ secrets.PUSHOVER_USER }}" \
            --form-string "title=‚úÖ Patch Release v${VERSION} Deployed" \
            --form-string "message=Automated patch release succeeded:

          Version: v${VERSION}
          Branch: ${{ steps.branch_info.outputs.branch }}

          Changes:
          ${{ steps.branch_info.outputs.commit_message }}

          All tests passed and changes have been merged to main." \
            --form-string "priority=0" \
            --form-string "sound=pushover" \
            https://api.pushover.net/1/messages.json

      - name: Send failure notification
        if: failure()
        run: |
          VERSION="${{ steps.branch_info.outputs.version }}"

          curl -s \
            --form-string "token=${{ secrets.PUSHOVER_TOKEN }}" \
            --form-string "user=${{ secrets.PUSHOVER_USER }}" \
            --form-string "title=‚ùå Patch Release v${VERSION} Failed" \
            --form-string "message=Automated patch release failed during merge:

          Version: v${VERSION}
          Branch: ${{ steps.branch_info.outputs.branch }}

          The branch has been preserved for manual review.

          Check workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --form-string "priority=1" \
            --form-string "sound=persistent" \
            https://api.pushover.net/1/messages.json

  # =====================================
  # Notify CI Failure
  # =====================================
  ci-failure:
    name: Notify CI Failure on Patch Branch
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'failure' &&
      startsWith(github.event.workflow_run.head_branch, 'auto-patch/')
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Get version and changes
        id: info
        run: |
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Get current version from Dockerfile
          CURRENT_VERSION=$(grep "^ARG VERSION=" Dockerfile | cut -d'=' -f2 | tr -d '"')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Get commit message
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 20)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send failure notification
        run: |
          VERSION="${{ steps.info.outputs.version }}"

          curl -s \
            --form-string "token=${{ secrets.PUSHOVER_TOKEN }}" \
            --form-string "user=${{ secrets.PUSHOVER_USER }}" \
            --form-string "title=‚ö†Ô∏è Patch Release v${VERSION} CI Failed" \
            --form-string "message=Automated patch release failed CI validation:

          Version: v${VERSION}
          Branch: ${{ steps.info.outputs.branch }}

          Changes attempted:
          ${{ steps.info.outputs.commit_message }}

          CI tests failed. Branch preserved for manual review.

          Workflow: ${{ github.event.workflow_run.html_url }}
          Branch: ${{ github.server_url }}/${{ github.repository }}/tree/${{ steps.info.outputs.branch }}" \
            --form-string "priority=1" \
            --form-string "sound=persistent" \
            https://api.pushover.net/1/messages.json
