# Simplified GitLab CI/CD Pipeline for Container Build System
# Uses Kaniko for building without Docker-in-Docker

variables:
  # Registry settings
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  PROJECT_NAME: "containers"

stages:
  - test
  - build
  - release

# =====================================
# Test Stage
# =====================================

# Run unit tests (without Docker)
test:unit:
  stage: test
  image: debian:12-slim
  script:
    - echo "Running unit tests without Docker..."
    - apt-get update && apt-get install -y bash
    # Set flag to skip Docker checks since we're testing bash scripts
    - export SKIP_DOCKER_CHECK=true
    - ./tests/run_unit_tests.sh || true  # Allow failure for now
  artifacts:
    paths:
      - tests/results/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_MERGE_REQUEST_ID'

# Code quality checks
test:code_quality:
  stage: test
  image: debian:12-slim
  script:
    - echo "Running code quality checks..."
    - apt-get update && apt-get install -y shellcheck
    - |
      find . -type f -name "*.sh" ! -path "./tests/*" ! -path "./.git/*" | while read -r file; do
        echo "Checking $file..."
        shellcheck -S warning "$file" || true
      done
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_MERGE_REQUEST_ID'

# =====================================
# Build Stage (using Kaniko)
# =====================================

# Build minimal image
build:minimal:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.0-debug
    entrypoint: [""]
  script:
    - echo "Building minimal container with Kaniko..."
    - |
      /kaniko/executor \
        --context . \
        --dockerfile Dockerfile \
        --destination $REGISTRY_IMAGE:minimal-$CI_COMMIT_SHORT_SHA \
        --destination $REGISTRY_IMAGE:minimal-latest \
        --build-arg PROJECT_NAME=$PROJECT_NAME \
        --build-arg PROJECT_PATH=. \
        --cache=true \
        --cache-repo=$REGISTRY_IMAGE/cache
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_TAG'

# Build Python development image
build:python-dev:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.0-debug
    entrypoint: [""]
  script:
    - echo "Building Python development container with Kaniko..."
    - |
      /kaniko/executor \
        --context . \
        --dockerfile Dockerfile \
        --destination $REGISTRY_IMAGE:python-dev-$CI_COMMIT_SHORT_SHA \
        --destination $REGISTRY_IMAGE:python-dev-latest \
        --build-arg PROJECT_NAME=$PROJECT_NAME \
        --build-arg PROJECT_PATH=. \
        --build-arg INCLUDE_PYTHON_DEV=true \
        --build-arg INCLUDE_OP=true \
        --build-arg INCLUDE_DEV_TOOLS=true \
        --build-arg INCLUDE_POSTGRES_CLIENT=true \
        --build-arg INCLUDE_REDIS_CLIENT=true \
        --build-arg INCLUDE_SQLITE_CLIENT=true \
        --build-arg INCLUDE_DOCKER=true \
        --cache=true \
        --cache-repo=$REGISTRY_IMAGE/cache
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_TAG'

# Build Node.js development image
build:node-dev:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.0-debug
    entrypoint: [""]
  script:
    - echo "Building Node.js development container with Kaniko..."
    - |
      /kaniko/executor \
        --context . \
        --dockerfile Dockerfile \
        --destination $REGISTRY_IMAGE:node-dev-$CI_COMMIT_SHORT_SHA \
        --destination $REGISTRY_IMAGE:node-dev-latest \
        --build-arg PROJECT_NAME=$PROJECT_NAME \
        --build-arg PROJECT_PATH=. \
        --build-arg INCLUDE_NODE_DEV=true \
        --build-arg INCLUDE_OP=true \
        --build-arg INCLUDE_DEV_TOOLS=true \
        --build-arg INCLUDE_POSTGRES_CLIENT=true \
        --build-arg INCLUDE_REDIS_CLIENT=true \
        --build-arg INCLUDE_SQLITE_CLIENT=true \
        --build-arg INCLUDE_DOCKER=true \
        --cache=true \
        --cache-repo=$REGISTRY_IMAGE/cache
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_TAG'

# Build cloud operations image
build:cloud-ops:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.0-debug
    entrypoint: [""]
  script:
    - echo "Building cloud operations container with Kaniko..."
    - |
      /kaniko/executor \
        --context . \
        --dockerfile Dockerfile \
        --destination $REGISTRY_IMAGE:cloud-ops-$CI_COMMIT_SHORT_SHA \
        --destination $REGISTRY_IMAGE:cloud-ops-latest \
        --build-arg PROJECT_NAME=$PROJECT_NAME \
        --build-arg PROJECT_PATH=. \
        --build-arg INCLUDE_KUBERNETES=true \
        --build-arg INCLUDE_TERRAFORM=true \
        --build-arg INCLUDE_AWS=true \
        --build-arg INCLUDE_GCLOUD=true \
        --build-arg INCLUDE_CLOUDFLARE=true \
        --build-arg INCLUDE_DEV_TOOLS=true \
        --build-arg INCLUDE_DOCKER=true \
        --build-arg INCLUDE_OP=true \
        --cache=true \
        --cache-repo=$REGISTRY_IMAGE/cache
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

# Build polyglot development image
build:polyglot:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.0-debug
    entrypoint: [""]
  script:
    - echo "Building polyglot development container with Kaniko..."
    - |
      /kaniko/executor \
        --context . \
        --dockerfile Dockerfile \
        --destination $REGISTRY_IMAGE:polyglot-$CI_COMMIT_SHORT_SHA \
        --destination $REGISTRY_IMAGE:polyglot-latest \
        --build-arg PROJECT_NAME=$PROJECT_NAME \
        --build-arg PROJECT_PATH=. \
        --build-arg INCLUDE_PYTHON_DEV=true \
        --build-arg INCLUDE_NODE_DEV=true \
        --build-arg INCLUDE_DEV_TOOLS=true \
        --build-arg INCLUDE_DOCKER=true \
        --build-arg INCLUDE_OP=true \
        --build-arg INCLUDE_POSTGRES_CLIENT=true \
        --build-arg INCLUDE_REDIS_CLIENT=true \
        --build-arg INCLUDE_SQLITE_CLIENT=true \
        --cache=true \
        --cache-repo=$REGISTRY_IMAGE/cache
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

# =====================================
# Release Stage
# =====================================

# Create GitLab release
release:gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating GitLab release for version $CI_COMMIT_TAG..."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: |
      ## Container Build System Release $CI_COMMIT_TAG
      
      ### Available Images
      - `$CI_REGISTRY_IMAGE:minimal-$CI_COMMIT_TAG` - Minimal base container
      - `$CI_REGISTRY_IMAGE:python-dev-$CI_COMMIT_TAG` - Python development environment with databases & tools
      - `$CI_REGISTRY_IMAGE:node-dev-$CI_COMMIT_TAG` - Node.js development environment with databases & tools
      - `$CI_REGISTRY_IMAGE:cloud-ops-$CI_COMMIT_TAG` - Cloud operations (K8s, Terraform, AWS/GCP/CF)
      - `$CI_REGISTRY_IMAGE:polyglot-$CI_COMMIT_TAG` - Python + Node.js combined environment
      
      ### Usage
      ```bash
      docker pull $CI_REGISTRY_IMAGE:python-dev-$CI_COMMIT_TAG
      docker run -it --rm $CI_REGISTRY_IMAGE:python-dev-$CI_COMMIT_TAG
      ```
      
      See [README.md](README.md) for detailed documentation.
  only:
    - tags