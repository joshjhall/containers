# Agent Container Configuration
# This example shows how to run multiple AI agent containers for distributed processing
#
# Usage:
#   docker compose -f docker-compose.yml up
#   docker compose -f docker-compose.yml scale agent=3  # Run 3 agent instances
#
# Features:
# - Multi-agent deployment with scaling support
# - Shared volume for knowledge base access
# - Redis for inter-agent communication
# - Resource limits to prevent runaway processes
# - Health checks for automatic recovery

services:
  # Redis for agent coordination and message passing
  redis:
    image: redis:8-alpine
    restart: unless-stopped
    volumes:
      - redis-data:/data
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Agent service - can be scaled horizontally
  agent:
    build:
      context: ../../../
      dockerfile: ./shell-tools/docker/agents/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
        - USERNAME=${USERNAME:-agent}
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      # Redis connection
      - REDIS_URL=redis://redis:6379

      # Agent configuration
      - AGENT_ID=${HOSTNAME:-agent}-${RANDOM:-1}
      - AGENT_TYPE=${AGENT_TYPE:-worker}
      - AGENT_LOG_LEVEL=${AGENT_LOG_LEVEL:-info}

      # Ollama configuration (if using local models)
      - OLLAMA_HOST=${OLLAMA_HOST:-http://host.docker.internal:11434}

      # API keys (if using cloud models)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      # Shared knowledge base
      - knowledge-base:/workspace/knowledge

      # Agent-specific workspace
      - agent-workspace:/workspace/agent

      # Logs
      - ./logs:/workspace/logs
    deploy:
      # Resource limits
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ['CMD', 'agent', 'health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Ollama for local model inference
  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    volumes:
      - ollama-models:/root/.ollama
    ports:
      - '11434:11434'
    deploy:
      resources:
        limits:
          # Adjust based on your GPU/CPU capabilities
          cpus: '4'
          memory: 8G
    # Uncomment for GPU support
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all

  # Optional: Agent coordinator/manager
  coordinator:
    build:
      context: ../../../
      dockerfile: ./shell-tools/docker/agents/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379
      - AGENT_TYPE=coordinator
      - AGENT_LOG_LEVEL=${AGENT_LOG_LEVEL:-info}
    volumes:
      - knowledge-base:/workspace/knowledge
      - ./logs:/workspace/logs
    ports:
      - '8080:8080' # API/Dashboard port
    deploy:
      # Only one coordinator
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 2G

volumes:
  redis-data:
    driver: local
  knowledge-base:
    driver: local
  agent-workspace:
    driver: local
  ollama-models:
    driver: local

networks:
  default:
    name: agents-network
    driver: bridge
